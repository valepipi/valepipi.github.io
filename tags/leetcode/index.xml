<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on 游泳小狗</title>
    <link>https://valepipi.github.io/tags/leetcode/</link>
    <description>Recent content in LeetCode on 游泳小狗</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 13 May 2023 16:38:45 +0800</lastBuildDate><atom:link href="https://valepipi.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🎰 LeetCode数组题解 (C&#43;&#43;)</title>
      <link>https://valepipi.github.io/posts/leetcode-array/</link>
      <pubDate>Sat, 13 May 2023 16:38:45 +0800</pubDate>
      
      <guid>https://valepipi.github.io/posts/leetcode-array/</guid>
      <description>本文为链表的Leetcode刷题记录。
参考资料: labuladong
数组技巧
前缀和：主要适用的场景是原始数组不会被修改的情况下，频繁查询某个区间的累加和。
差分数组: 主要适用场景是频繁对原始数组的某个区间的元素进行增减。
🎰 &amp;lt;数组&amp;gt; 题目列表&amp;hellip;
题解26. 删除有序数组中的重复项//简单
原地修改，双指针
slow记录当前元素，fast在前方试探下一个不同的元素 fast遇到不同的元素时，赋值给slow的下一个位置 (数组有序) 当fast遍历完数组，结束；此时，0-slow是去重后的数组 class Solution { public: int removeDuplicates(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int slow = 0; int fast = 0; if(nums.size() == 0) return 0; while(fast &amp;lt; nums.size()){ if(nums[slow] != nums[fast]){ slow++; nums[slow] = nums[fast]; } fast++; } return slow+1; } }; 27. 移除元素//简单 26. 删除有序数组中的重复项的变体
原地修改，双指针
移除指定的元素
修改nums[slow] = nums[fast]条件即可: nums[fast] != val</description>
    </item>
    
    <item>
      <title>🔗 LeetCode链表题解 (C&#43;&#43;)</title>
      <link>https://valepipi.github.io/posts/leetcode-linklist-c&#43;&#43;/</link>
      <pubDate>Tue, 09 May 2023 09:45:06 +0800</pubDate>
      
      <guid>https://valepipi.github.io/posts/leetcode-linklist-c&#43;&#43;/</guid>
      <description>本文为链表的Leetcode刷题记录。
参考资料: labuladong
🔗 &amp;lt;链表&amp;gt; 题目列表&amp;hellip;
题解单链表节点定义
struct ListNode { int val; ListNode *next; ListNode() : val(0), next(nullptr) {} ListNode(int x) : val(x), next(nullptr) {} ListNode(int x, ListNode *next) : val(x), next(next) {} }; 21.合并两个有序链表//简单
dummy
class Solution { public: ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode* dummy = new ListNode(-1); ListNode* p = dummy; ListNode* p1 = list1; ListNode* p2 = list2; while(p1 != nullptr &amp;amp;&amp;amp; p2 !</description>
    </item>
    
    <item>
      <title>🌴 LeetCode二叉树题解 (C&#43;&#43;)</title>
      <link>https://valepipi.github.io/posts/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-c&#43;&#43;/</link>
      <pubDate>Sun, 07 May 2023 14:26:59 +0800</pubDate>
      
      <guid>https://valepipi.github.io/posts/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-c&#43;&#43;/</guid>
      <description>本文为二叉树和二叉搜索树的Leetcode刷题记录。
参考资料: labuladong
🌴 &amp;lt;二叉树&amp;gt; 题目列表力扣题目 知识点 难度 104. 二叉树的最大深度 遍历 简单 543. 二叉树的直径 遍历 简单 144. 二叉树的前序遍历 遍历 简单 226. 翻转二叉树 遍历 简单 114. 二叉树展开为链表 递归 中等 116. 填充每个节点的下一个右侧节点指针 遍历三叉树 中等 105. 从前序与中序遍历序列构造二叉树 递归构造 中等 106. 从中序与后序遍历序列构造二叉树 递归构造 中等 889. 根据前序和后序遍历构造二叉树 递归构造(结果不唯一) 中等 654. 最大二叉树 递归构造 中等 652. 寻找重复的子树 后序遍历 中等 337. 打家劫舍 III 遍历 中等 236. 二叉树的最近公共祖先 递归 中等 222. 完全二叉树的节点个数 递归 中等 297. 二叉树的序列化与反序列化 递归 困难 题解二叉树结点定义</description>
    </item>
    
    <item>
      <title>🐰LeetCode Hot100 题解 (Python)</title>
      <link>https://valepipi.github.io/posts/leetcode/</link>
      <pubDate>Sat, 21 Jan 2023 19:57:59 +0800</pubDate>
      
      <guid>https://valepipi.github.io/posts/leetcode/</guid>
      <description>😃数学问题1. 两数之和给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。
输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: &amp;#34;&amp;#34;&amp;#34; 1. 暴力查找O(n^2) 2. 利用dict反查O(n) &amp;#34;&amp;#34;&amp;#34; # n = len(nums) # for i in range(n): # for j in range(i + 1, n): # if nums[i] + nums[j] == target: # return [i ,j] # return [] dict = {} for i in range( len(nums) ): if target - nums[i] not in dict: dict[nums[i]] = i #建立反查表 else: return [dict[target-nums[i]], i] 88.</description>
    </item>
    
  </channel>
</rss>
