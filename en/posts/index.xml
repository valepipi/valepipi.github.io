<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ping&#39;s Blog</title>
    <link>https://valepipi.github.io/en/posts/</link>
    <description>Recent content in Posts on Ping&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 09 May 2023 09:45:06 +0800</lastBuildDate><atom:link href="https://valepipi.github.io/en/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🔗 LeetCode链表题解 (C&#43;&#43;)</title>
      <link>https://valepipi.github.io/en/posts/leetcode-linklist-c&#43;&#43;/</link>
      <pubDate>Tue, 09 May 2023 09:45:06 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/leetcode-linklist-c&#43;&#43;/</guid>
      <description>本文为链表的Leetcode刷题记录。
参考资料: labuladong
🔗 &amp;lt;链表&amp;gt; 题目列表&amp;hellip;
题解单链表节点定义
struct ListNode { int val; ListNode *next; ListNode() : val(0), next(nullptr) {} ListNode(int x) : val(x), next(nullptr) {} ListNode(int x, ListNode *next) : val(x), next(next) {} }; 21.合并两个有序链表//简单
dummy
class Solution { public: ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode* dummy = new ListNode(-1); ListNode* p = dummy; ListNode* p1 = list1; ListNode* p2 = list2; while(p1 != nullptr &amp;amp;&amp;amp; p2 !</description>
    </item>
    
    <item>
      <title>🌴 LeetCode二叉树题解 (C&#43;&#43;)</title>
      <link>https://valepipi.github.io/en/posts/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-c&#43;&#43;/</link>
      <pubDate>Sun, 07 May 2023 14:26:59 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-c&#43;&#43;/</guid>
      <description>本文为二叉树和二叉搜索树的Leetcode刷题记录。
参考资料: labuladong
🌴 &amp;lt;二叉树&amp;gt; 题目列表力扣题目 知识点 难度 104. 二叉树的最大深度 遍历 简单 543. 二叉树的直径 遍历 简单 144. 二叉树的前序遍历 遍历 简单 226. 翻转二叉树 遍历 简单 114. 二叉树展开为链表 递归 中等 116. 填充每个节点的下一个右侧节点指针 遍历三叉树 中等 105. 从前序与中序遍历序列构造二叉树 递归构造 中等 106. 从中序与后序遍历序列构造二叉树 递归构造 中等 889. 根据前序和后序遍历构造二叉树 递归构造(结果不唯一) 中等 654. 最大二叉树 递归构造 中等 652. 寻找重复的子树 后序遍历 中等 337. 打家劫舍 III 遍历 中等 236. 二叉树的最近公共祖先 递归 中等 222. 完全二叉树的节点个数 递归 中等 297. 二叉树的序列化与反序列化 递归 困难 题解二叉树结点定义</description>
    </item>
    
    <item>
      <title>How to OpenMP</title>
      <link>https://valepipi.github.io/en/posts/how-to-openmp/</link>
      <pubDate>Fri, 24 Feb 2023 23:32:39 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/how-to-openmp/</guid>
      <description>介绍fork-join模式的并行编程库， 操作线程单位， 线程级别并行
用类似于 #pragma omp parallel num_threads(8) 的制导语句指定程序中的并行区域
安装在ubuntu自带的build-essential包中, 查看openmp版本：
echo |cpp -fopenmp -dM |grep -i open #define _OPENMP 201511 编译使用直接在编译语句添加-fopenmp g++ -02 -std=c++4 -fopenmp hello.cpp -o hello 或者修改项目的task.json, 在args中加入&amp;quot;-fopenmp&amp;quot; &amp;#34;tasks&amp;#34;:[ { &amp;#34;args&amp;#34;: [ &amp;#34;-fdiagnostics-color=always&amp;#34;, &amp;#34;-fopenmp&amp;#34;, &amp;#34;-g&amp;#34;, &amp;#34;${file}&amp;#34;, &amp;#34;-o&amp;#34;, &amp;#34;${fileDirname}/${fileBasenameNoExtension}&amp;#34; ], } ] 常用的库函数// 设置并行区运行的线程数 void omp_set_num_threads(int) // 获得并行区运行的线程数 void omp_get_num_threads(int) // 获得线程编号 void omp_get_thread_num(void) // 获得openmp wall clock时间(秒) void omp_get_wtime(void) // 获得omp_get_wtime时间精度 void omp_get_wtick(void) 常用语法变量构造并行</description>
    </item>
    
    <item>
      <title>神经网络基础</title>
      <link>https://valepipi.github.io/en/posts/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 30 Jan 2023 14:45:42 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
      <description>神经网络基本概念神经网络分为两个阶段的运算：训练、推理
训练——过程视角正向传播：目的是使用当前未训练好的网络对训练样本进行推理；过程和推理过程完全一致，包含大量的矩阵-向量乘法运算 反向传播：目的是根据正向传播获得的计算误差，依次计算并存储各层的中间变量以及参数的梯度，包含大量反向的矩阵-向量乘法运算 权重更新：在正向或反向传播的过程中都会进行权重更新，需要计算各权重矩阵的梯度大小，得到权重的更新值，实现模型的更新 推理——结构视角全连接层
卷积层
目的：利用卷积运算的局部特性提取图像的局部特征并逐层抽象 与全连接层的区别：卷积层可以用较少的模型参数实 现对大规模图像的特征提取 特征图(feature map)：在卷积层间传输的特征数据；输入特征图——&amp;gt;卷积核——&amp;gt;输出特征图 卷积核(Convolution Kernel)：卷积核运算是卷积层中的主要运算，涉及大量的数据计算和数据传输。卷积核运算是将两个三维矩阵中的对应元素进行乘法运算，再将乘得的结果进行累加计算。 S为卷积核的行/列的数量，I 为输入特征图的通道数，即一个卷积核的大小为 S×S×I；
假设通道数=1时，一个卷积核在特征图上扫过的面积就是输出结果的size：一个卷积核扫过特征图上的一个区域就得到一个值(size=1*1)，把所有区域的值按照行列拼接起来就是结果(size=扫过的面积)
其他：级联在两层卷积运算中间的辅助运算，如非线性神经元函数(ReLU/Sigmoid)、池化(Pooling)等 非线性神经元函数
目的：提供非线性分类能力，广泛用于传统全连接神经网络、卷积神经网络等各类神经网络算法中 在CNN中，通常级联在卷积核运算后 池化函数
目的：对特征图进行空间压缩,降低特征图的维度 做法：把特征图相邻范围内的所有元素 用一个值替代，从而在保持局部特征的同时，降低卷积神经网络的计算量和参数量 与卷积核运算的区别：池化函数尽管使用与卷积核相同的滑窗形式，在全特征图中进行运算，但是*步长（Stride）*运算形式会令同一个特征图元素不会被包含至多个池化区域内。 形式：平均池化（Mean Pooling）、最大池化（Max Pooling） 相比于平均池化，最大池化更容易保留特征图中最鲜明的特征信息</description>
    </item>
    
    <item>
      <title>cuda编程</title>
      <link>https://valepipi.github.io/en/posts/cuda/</link>
      <pubDate>Tue, 24 Jan 2023 22:00:57 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/cuda/</guid>
      <description>Cuda存储结构Global memory： 可读可写，最大最慢，所有Block共享，通常所说32G的GPU指的是global memory=32G Constant memory: 只读，所有Block共享 Texture memory: 只读，所有Block共享 GPU通过以上三种memory与Host上的memory交互 cudaMemcpy()
Shared memory: 可读可写，很快，较小，一个block内的Thread共享 Local memory: 可读可写，很快，很小，Thread专用 Registers: 可读可写，很快，很小，Thread专用 Cuda线程结构Grid:一组线程块(block) block：一组线程(thread) thread Cuda编程模型的关键术语host: CPU device: GPU host memory: 系统的内存 device memory：gpu卡上的存储器 kernels: GPU函数，由host发出，由device执行 device function: GPU函数，device执行，并且只能被device调用 </description>
    </item>
    
    <item>
      <title>🐰LeetCode Hot100 题解 (Python)</title>
      <link>https://valepipi.github.io/en/posts/leetcode/</link>
      <pubDate>Sat, 21 Jan 2023 19:57:59 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/leetcode/</guid>
      <description>😃数学问题1. 两数之和给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。
输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: &amp;#34;&amp;#34;&amp;#34; 1. 暴力查找O(n^2) 2. 利用dict反查O(n) &amp;#34;&amp;#34;&amp;#34; # n = len(nums) # for i in range(n): # for j in range(i + 1, n): # if nums[i] + nums[j] == target: # return [i ,j] # return [] dict = {} for i in range( len(nums) ): if target - nums[i] not in dict: dict[nums[i]] = i #建立反查表 else: return [dict[target-nums[i]], i] 88.</description>
    </item>
    
    <item>
      <title>SQL题目</title>
      <link>https://valepipi.github.io/en/posts/sql%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Mon, 27 Jun 2022 18:57:30 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/sql%E9%A2%98%E7%9B%AE/</guid>
      <description>题目1：⛺查询并计算留存率留存率：留存用户数/总用户数 留存用户：第一天登录，且第二天也登录的用户 四舍五入保留3位小数：round(原始数字，3) 根据得到后一天的日期：DATE_ADD(当天日期yy-mm-dd, INTERVAL 1 DAY) 登录的第一天： min(date) Select round(count(distinct user_id)*1.0/(select count(distinct user_id) from login) ,3) from login where (user_id,date) in (select user_id, DATE_ADD(min(date),INTERVAL 1 DAY) from login group by user_id) </description>
    </item>
    
    <item>
      <title>搭建个人博客</title>
      <link>https://valepipi.github.io/en/posts/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 27 Jun 2022 18:21:48 +0800</pubDate>
      
      <guid>https://valepipi.github.io/en/posts/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hugo+Github搭建博客 参考链接：
Github Pages + Hugo 搭建个人博客
配置主题：
Hugo-Coder主题配置
美化：
插入emoji
更新博客： 先 cd 到 myblog/content 目录下，然后写 md 文章 写好以后，cd 到myblog 下执行 hugo 命令重新生成 public 文件 再cd 进 myblog/public 中，然后执行 git 提交命令提交到 github 即可 # 1.新建一篇文章，在网站根目录：H:\HugoWebsite\blog hugo new posts/测试博客.md # 2.在目录 H:\HugoWebsite\blog\content\posts 下找到对应文件进行修改 # 3.本地预览, http://localhost:1313/ hugo server -D # 4.构建 Hugo 网站 hugo # 5.切换到目录 H:\HugoWebsite\blog\public ，提交修改至本地库 git add . git commit -m &amp;#39;commit info&amp;#39; # 6.将修改推至远程库 git push -u origin master </description>
    </item>
    
  </channel>
</rss>
